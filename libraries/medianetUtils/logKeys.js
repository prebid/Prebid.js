import {
  calculateRoundTripTime,
  getBidResponseSize,
  getRequestedSizes,
  getTopWindowReferrer,
  getWindowSize,
  pick,
} from './utils.js';
import { config } from '../../src/config.js';
import { AUCTION_COMPLETED, AUCTION_IN_PROGRESS } from '../../src/auction.js';
import { safeJSONEncode, deepAccess } from '../../src/utils.js';
import { getProcessedParams, mergeFieldsToLog } from './logger.js';
import {
  ANALYTICS_VERSION,
  AUCTION_OPTIONS, LOG_APPR, LOG_RA,
  MEDIANET,
  PREBID_VERSION,
  TIMEOUT_AFTER_AUCTION,
  VIDEO_PLACEMENT,
} from './constants.js';

export const KeysMap = {
  Pick: {
    Auction: [
      'adSlots', () => ({}),
      'bidsRequested', () => [],
      'bidsReceived', () => [],
      'responseBids', () => [],
      'bidsTimeout', () => [],
      'noBids', () => [],
      'psiBids', () => [],
      'bidderRequests as pendingRequests', (bidderRequests) => bidderRequests.length,
      'hasEnded', () => false,
      'auctionId',
      'auctionStatus',
      'timestamp',
      'timeout',
      'bidderRequests.0.ortb2.sup_log',
      'bidderRequests.0.bids.0.floorData',
      'bidderRequests.0.refererInfo',
      'bidderRequests.0 as consentInfo', (consentInfo) => pick(consentInfo, ['gdprConsent', 'uspConsent']),
    ],
    AdSlot: [
      'code',
      'ext as adext',
      'logged', () => ({[LOG_APPR]: false, [LOG_RA]: false}),
      'supcrid', (_, __, adUnit) => adUnit.emsCode || adUnit.code,
      'ortb2Imp',
    ],
    BidRequest: [
      // from bidRequest
      'bidder',
      'src',
      'params',
      'bidId',
      'bidId as originalRequestId',
      'adUnitCode',
      'mediaTypes', (mediaTypes) => Object.keys(mediaTypes),
      'iwb', () => 0,
      'winner', () => 0,
      'status', () => TIMEOUT_AFTER_AUCTION,
      'responseReceived', () => false,
      'sizes', (_, __, bidRequest) => getRequestedSizes(bidRequest),
      'ext', () => ({}),
    ],
    BidResponse: [
      'originalCurrency',
      'originalRequestId',
      'requestId',
      // multi-bid
      'originalBidder',
      // from bidderRequest
      'bidderCode',
      'currency',
      'adId',
      'snm as status',
      'mediaType',
      'cpm',
      'timeToRespond',
      'dealId',
      'meta',
      'originalCpm',
      'bidderCode',
      'creativeId',
      'latestTargetedAuctionId',
      'floorData',
      'width',
      'height',
      'size', (size, logObj) => size || getBidResponseSize(logObj.width, logObj.height),
      'ext',
    ]
  },
  Log: {
    Bid: [
      'meta.advertiserDomains as advurl', (advertiserDomains = []) => advertiserDomains.join(','),
      'currMul as omul',
      'originalCurrency as icurr',
      'inCurrMul as imul',
      'mediaTypes as req_mtype', (mediaTypes) => mediaTypes.join('|'),
      'mediaType as res_mtype',
      'mediaType as mtype', (mediaType, __, {mediaTypes}) => mediaType || mediaTypes.join('|'),
      'ext.seat as ortbseat',
      'ext.int_dsp_id as mx_int_dsp_id',
      'ext.int_agency_id as mx_int_agency_id',
      'ext.pvid as mpvid',
      'ext.crid', (crid, _, bidObj) => crid || deepAccess(bidObj.params, 'crid'),
      'ext', (ext, _, bidObj) => safeJSONEncode(bidObj.bidder === MEDIANET ? ext : {}),
      'requestId as reqid', (requestId, _, bidObj) => requestId || bidObj.bidId,
      'originalRequestId as ogReqId',
      'adId as adid',
      'originalBidder as og_pvnm',
      'bidderCode as pvnm', (bidderCode, _, {bidder}) => bidderCode || bidder,
      'src',
      'originalCpm as ogbdp',
      'bdp', (bdp, _, bidObj) => bdp || bidObj.cpm,
      'cpm as cbdp',
      'dfpbd',
      'dealId as dId',
      'winner',
      'currency as curr',
      'timeToRespond as rests',
      'status',
      'iwb',
      'floorData.floorValue as bidflr',
      'floorData.floorRule as flrrule',
      'floorRuleValue as flrRulePrice',
      'serverLatencyMillis as rtime',
      'creativeId as pcrid',
      'dbf',
      'latestTargetedAuctionId as lacid',
      'utime',
      'metrics as ltime', (metrics, logObj) => logObj.rests || calculateRoundTripTime(metrics),
      'bidder as issec', (bidder) => config.getConfig(AUCTION_OPTIONS)?.secondaryBidders?.includes?.(bidder) ? 1 : 0,
      'sizes as szs', (sizes) => sizes.join('|'),
      'size', (size, _, bidObj) => (bidObj.res_sizes || [size]).join('|'),
      'params', (params, _, bidObj) => getProcessedParams(params, bidObj.status),
    ],
    AdSlot: [
      'supcrid',
      'code as og_supcrid',
      'context as vplcmtt', (context) => VIDEO_PLACEMENT[context] || 0,
      'ortb2Imp.instl as oop',
      'targeting as targ', (targeting) => safeJSONEncode(targeting),
      'adext', (adext) => encodeURIComponent(safeJSONEncode(adext)),
    ],
    Auction: [
      'auctionId as acid',
      'sup_log',
      'consentInfo.gdprConsent.consentString as gdprConsent',
      'consentInfo.uspConsent as ccpa',
      'consentInfo.gdprConsent.gdprApplies as gdpr', (gdprApplies) => (gdprApplies ? '1' : '0'),
      'coppa', () => (config.getConfig('coppa') === true ? 1 : 0),
      'hasEnded as aucstatus', (hasEnded) => (hasEnded ? AUCTION_COMPLETED : AUCTION_IN_PROGRESS),
      'availableUids as uid_mod_avb', (availableUids) => safeJSONEncode(availableUids),
      'uidValues as id_details', (uidValues) => safeJSONEncode(uidValues),
      'refererInfo.topmostLocation as requrl',
      'refererInfo.domain as dn',
      'refererInfo.ref', getTopWindowReferrer,
      'screen', getWindowSize,
      'timeout as tmax',
      'sts', (_, __, auctionObj) => auctionObj.auctionStartTime - auctionObj.timestamp,
      'ets', (_, __, auctionObj) => auctionObj.auctionEndTime - auctionObj.timestamp || -1,
      'floorData.modelVersion as flrver',
      'floorData as flrdata', (floorData) => mergeFieldsToLog(pick(floorData, [
        'location as ln',
        'skipped as skp',
        'skipRate as sr',
        'fetchStatus as fs',
        'enforcements.enforceJS as enfj',
        'enforcements.floorDeals as enfd'
      ]))
    ],
    Globals: [
      'cid',
      'ajaxState as ajx',
      'pubLper as plper',
      'loggingPercent as lper', (loggingPercent) => Math.round(100 / loggingPercent),
      'enableDbf', () => 1,
      'flt', () => 1,
      'pbv', () => PREBID_VERSION,
      'pbav', () => ANALYTICS_VERSION,
      'coppa', () => (config.getConfig('coppa') === true ? 1 : 0)
    ]
  }
};
